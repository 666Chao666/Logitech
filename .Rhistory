temp_row <- df[i, ]
temp_char <- paste(temp_row$Category1, temp_row$Category2, temp_row$Category3
, sep = '')
print(temp_char)
append(cats, temp_char)
}
cats <- vector(length = dim(categories)[1])
for (i in 1:dim(categories)[1]) {
temp_row <- df[i, ]
temp_char <- paste(temp_row$Category1, temp_row$Category2, temp_row$Category3
, sep = '')
print(temp_char)
cats[i] <- temp_char
}
# source functions
source("Category_construction.R")
categories <- Category_construction(categories)
sells %>%
group_by(colnames(selss))
sells %>%
group_by(colnames(sells))
t(sells)
t(selss)
t(sells)
t(sells)
exper <- t(sells)
row.names(exper) <- parse_date_time(row.names(exper), order='my')
exper
exper <- t(sells)
row.names(exper)
parse_date_time(row.names(exper), orders = 'my')
dates <- parse_date_time(row.names(exper), orders = 'my')
row.names(exper) <- dates
View(exper)
format(as.Date(dates), "%Y-%m")
dates <- format(as.Date(dates), "%Y-%m")
as.character(dates)
dates <- as.character(dates)
row.names(exper) <- dates
colnames(exper) <- categories
exper
View(exper)
View(exper)
# load packages
library(tidyverse)
# load packages
library(tidyverse)
library(lubridate)
library(ggplot2)
# source functions
source("Category_construction.R")
# load data
df <- read.csv('use_case.csv')
# remove all rows with Null's
df <- df %>%
filter(!(df$Category1 == 'NULL' | df$Category2 == 'NULL' |
df$Category3 == 'NULL' | is.na(.)))
# remove rows with too many 0's, similar reasoning as removing Null's
df <- df[rowSums(df == 0) <= 32, ]
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sells) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
View(sales)
View(sales)
# load packages
library(tidyverse)
# load packages
library(tidyverse)
library(lubridate)
library(ggplot2)
# source functions
source("Category_construction.R")
# load data
df <- read.csv('use_case.csv')
# remove all rows with Null's
df <- df %>%
filter(!(df$Category1 == 'NULL' | df$Category2 == 'NULL' |
df$Category3 == 'NULL' | is.na(.)))
# remove rows with too many 0's, similar reasoning as removing Null's
df <- df[rowSums(df == 0) <= 32, ]
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sells) == 0]
sales <- sales[!colSums(sails) == 0]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
View(sales)
exper <- t(sales)
View(exper)
# build final data frame
dates <- format(parse_date_time(row.names(sales), orders = 'my'), "%Y-%m")
dates
# build final data frame
dates <- format(parse_date_time(colnames(sales), orders = 'my'), "%Y-%m")
dates
sales <- t(sales)
row.names(sales) <- c(1:dim(sales)[1])
#
categories <- df[, c(1:3)]
categories <- Category_construction(categories)
colnames(sales) <- categories
add_column(sales, dates)
dates
typeof(dates[1])
add_column(sales, dates)
typeof(dates)
typeof(c(dates))
c(dates)
list(dates)
mutate(sales, TIME = dates)
sales %>%
mutate(TIME = dates)
xxx <- parse_date_time(colnames(sales), orders = 'my')
sales['TIME'] <- dates
# load packages
library(tidyverse)
# load packages
library(tidyverse)
library(lubridate)
library(ggplot2)
# source functions
source("Category_construction.R")
# load data
df <- read.csv('use_case.csv')
# remove all rows with Null's
df <- df %>%
filter(!(df$Category1 == 'NULL' | df$Category2 == 'NULL' |
df$Category3 == 'NULL' | is.na(.)))
# remove rows with too many 0's, similar reasoning as removing Null's
df <- df[rowSums(df == 0) <= 32, ]
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
#
categories <- df[, c(1:3)]
View(sales)
# build final data frame
dates <- parse_date_time(colnames(sales), orders = 'my')
sales <- t(sales)
sales['TIME'] <- dates
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
#
categories <- df[, c(1:3)]
# build final data frame
dates <- parse_date_time(colnames(sales), orders = 'my')
sales['TIME'] <- dates.vector
sales$TIME <- dates.vector
sales$TIME <- dates
sales <- t(sales)
sales$TIME <- dates
View(sales)
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
#
categories <- df[, c(1:3)]
# build final data frame
dates <- parse_date_time(colnames(sales), orders = 'my')
sales <- t(sales)
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
View(df)
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
#
categories <- df[, c(1:3)]
categories <- Category_construction(categories)
# build final data frame
dates <- parse_date_time(colnames(sales), orders = 'my')
sales <- as.data.frame(t(sales))
sales$TIME <- dates
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
#
categories <- df[, c(1:3)]
# build final data frame
dates <- as.Date(format(parse_date_time(colnames(sales), orders = 'my'),
"%Y-%m"))
# build final data frame
dates <- (format(parse_date_time(colnames(sales), orders = 'my'),
"%Y-%m"))
# build final data frame
dates <- (format(parse_date_time(colnames(sales), orders = 'my'), "%Y-%m"))
dates
as.Date(dates)
sales <- as.data.frame(t(sales))
row.names(sales) <- c(1:dim(sales)[1])
colnames(sales) <- categories
sales$TIME <- dates
#
categories <- df[, c(1:3)]
categories <- Category_construction(categories)
colnames(sales) <- categories
source("dataFrameTransformation.R")
source("dataFrameTransformation.R")
# build final data frame
final_df <- dataFrameTransformation(sales, categories)
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
#
categories <- df[, c(1:3)]
categories <- Category_construction(categories)
# build final data frame
final_df <- dataFrameTransformation(sales, categories)
View(final_df)
p <- ggplot(final_df, aes(x=TIME, y=AAA)) +
geom_line() +
xlab("")
p
# source functions
source("Category_construction.R")
source("dataFrameTransformation.R")
# source functions
source("categoryConstruction.R")
source("dataFrameTransformation.R")
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
#
categories <- df[, c(1:3)]
categories <- Category_construction(categories)
# build final data frame
final_df <- dataFrameTransformation(sales, categories)
p <- ggplot(final_df, aes(x=TIME, y=AAA)) +
geom_line() +
xlab("")
p
categories
make.names(categories)
make.names(as.character(categories))
make.names(categories, T)
# source functions
source("categoryConstruction.R")
#
categories <- df[, c(1:3)]
categories <- Category_construction(categories)
# build final data frame
final_df <- dataFrameTransformation(sales, categories)
p <- ggplot(final_df, aes(x=TIME, y=AAA)) +
geom_line() +
xlab("")
p
# source functions
source("categoryConstruction.R")
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
#
categories <- df[, c(1:3)]
categories <- Category_construction(categories)
categories
# source functions
source("categoryConstruction.R")
source("dataFrameTransformation.R")
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
categories <- Category_construction(categories)
categories
categories <- Category_construction(categories)
#
categories <- df[, c(1:3)]
categories <- Category_construction(categories)
categories
# source functions
source("categoryConstruction.R")
source("dataFrameTransformation.R")
#
categories <- df[, c(1:3)]
categories
categories <- Category_construction(categories)
categories <- CategoryConstruction(categories)
categories <- categoryConstruction(categories)
#
categories <- df[, c(1:3)]
categories <- categoryConstruction(categories)
categories
# build final data frame
final_df <- dataFrameTransformation(sales, categories)
p <- ggplot(final_df, aes(x=TIME, y=AAA)) +
geom_line() +
xlab("")
p
source("dataFrameTransformation.R")
# remove leading and trailing 0's,
sales <- df[, -c(1:3)]
sales <- sales[!colSums(sales) == 0]
# remove Sep.16
sales <- select(sales, -'Sep.16')
categories <- categoryConstruction(categories)
categories
#
categories <- df[, c(1:3)]
categories <- categoryConstruction(categories)
categories
# build final data frame
final_df <- dataFrameTransformation(sales, categories)
View(final_df)
p <- ggplot(final_df, aes(x=TIME, y=AAA)) +
geom_line() +
xlab("")
p
gather(final_df, "Product", "Sales", -TIME)
fam_A <- final_df %>%
select(starts_with('A'))
View(fam_A)
gather(fam_A, "Product", "Sales", -TIME)
fam_A <- final_df %>%
select(starts_with('A'), TIME)
gather(fam_A, "Product", "Sales", -TIME)
fam_A <- gather(fam_A, "Product", "Sales", -TIME)
p <- ggplot(fam_A, aes(x=TIME, y=Sales)) +
geom_line(aes(color=Product, linestype=Product)) +
xlab("")
p
p <- ggplot(fam_A, aes(x=TIME, y=Sales)) +
geom_line(aes(color=Product, linetype=Product)) +
xlab("")
p
p <- ggplot(fam_A, aes(x=TIME, y=Sales)) +
geom_line(aes(color=Product)) +
xlab("")
p
fam_B <- gather(fam_B, "Product", "Sales", -TIME)
fam_B <- final_df %>%
select(starts_with('B'), TIME)
fam_B <- gather(fam_B, "Product", "Sales", -TIME)
ggplot(fam_B, aes(x=TIME, y=Sales)) +
geom_line(aes(color=Product)) +
xlab("")
fam_C <- final_df %>%
select(starts_with('C'), TIME)
fam_C <- gather(fam_C, "Product", "Sales", -TIME)
ggplot(fam_C, aes(x=TIME, y=Sales)) +
ggplot(fam_C, aes(x=TIME, y=Sales)) +
geom_line(aes(color=Product)) +
xlab("")
ggplot(fam_C, aes(x=TIME, y=Sales)) +
geom_line(aes(color=Product)) +
xlab("")
ggplot(fam_C, aes(x=TIME, y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal()
ggplot(fam_C, aes(x=TIME, y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_labels = "%b-%Y")
ggplot(fam_C, aes(x=TIME, y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_labels = "%b")
fam_C['TIME']
typeof(fam_C['TIME'])
typeof(fam_C['TIME'][1])
fam_C['TIME'][1]
fam_C['TIME']
fam_C['TIME'][5]
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date()
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_labels = "%b")
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_labels = "%b-%Y")
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "%b", date_labels = "%b-%Y")
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "1 Month", date_labels = "%b-%Y")
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "%b", date_labels = "%b-%Y")
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "%B", date_labels = "%b-%Y")
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "%W", date_labels = "%b-%Y")
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "%b", date_labels = "%b")
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "1 month", date_labels = "%b")
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "1 month", date_labels = "%b-%Y")
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "1 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle =- 90, vjust = 0.5))
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "1 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "4 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle = 90, vjust = 0.5))
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "4 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle = 60, vjust = 0.5))
ggplot(fam_A, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "4 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle = 60, vjust = 0.5))
ggplot(fam_B, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "4 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle = 60, vjust = 0.5))
ggplot(fam_B, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "3 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle = 60, vjust = 0.5))
ggplot(fam_B, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "4 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle = 60, vjust = 0.5))
ggplot(fam_A, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "4 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle = 60, vjust = 0.5))
ggplot(fam_B, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "4 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle = 60, vjust = 0.5))
ggplot(fam_C, aes(x=as.Date(TIME), y=Sales)) +
geom_line(aes(color=Product)) +
xlab("") +
theme_minimal() +
scale_x_date(date_breaks = "4 month", date_labels = "%b-%Y") +
theme(axis.text.x=element_text(angle = 60, vjust = 0.5))
